<Application x:Class="Lazarus.Desktop.App"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:conv="clr-namespace:Lazarus.Desktop.Converters"
			 xmlns:local="clr-namespace:Lazarus.Desktop.Views">
	<Application.Resources>
		<ResourceDictionary>
			<!-- === DEFAULT DUAL PERSONALIZATION PRELOAD === -->
			<!-- Load design tokens FIRST, then theme, then ViewMode templates to ensure proper resource hierarchy -->
			<ResourceDictionary.MergedDictionaries>
				<!-- Design Token System: Load architectural constants first -->
				<ResourceDictionary Source="Resources/Tokens.xaml"/>
				
				<!-- Theme System: Load Dark Gothic theme as default -->
				<ResourceDictionary Source="Resources/Themes/DarkTheme.xaml"/>
				
				<!-- ViewMode System: Load shared styles only - actual templates loaded dynamically by UserPreferencesService -->
				<ResourceDictionary Source="Resources/ViewModes/SharedTemplates.xaml"/>
				<!-- NOTE: ViewMode templates (NoviceTemplates.xaml, etc.) are loaded dynamically by UserPreferencesService to prevent key collisions -->
			</ResourceDictionary.MergedDictionaries>
			
			<conv:RoleToBrushConverter x:Key="RoleToBrush"/>
		<conv:RoleToAlignmentConverter x:Key="RoleToAlignment"/>
		<conv:RoleToDisplayNameConverter x:Key="RoleToDisplayName"/>
		<conv:ForensicVisibilityConverter x:Key="ForensicVisibilityConverter"/>
		<conv:InvertBoolConverter x:Key="InvertBool"/>
		<conv:StringToBoolConverter x:Key="StringToBool"/>

		<!-- Missing converters that were causing the digital apocalypse -->
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
		<conv:ZeroToVisibilityConverter x:Key="ZeroToVisibilityConverter"/>
		<conv:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
		<conv:StringEqualsVisibilityConverter x:Key="StringEqualsVisibilityConverter"/>
		<conv:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
		<conv:NullToInverseVisibilityConverter x:Key="NullToInverseVisibilityConverter"/>
		<conv:BooleanToAlignmentConverter x:Key="BooleanToAlignmentConverter"/>
		<conv:MessageBackgroundConverter x:Key="MessageBackgroundConverter"/>

		<!-- Voice UI converters -->
		<conv:SpeakingToText x:Key="SpeakingToText"/>
		<conv:SpeakingToBrush x:Key="SpeakingToBrush"/>

		<!-- BoolToTextConverter for status display - moved from VAEsView -->
		<conv:BoolToTextConverter x:Key="BoolToStatusConverter"
								  TrueText="Loaded"
								  FalseText="Default"/>

		<!-- Missing converters causing LoRAs tab crashes -->
		<conv:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>
		<conv:InverseStringToVisibilityConverter x:Key="InverseStringToVisibilityConverter"/>
		<conv:BoolToApplyTextConverter x:Key="BoolToApplyTextConverter"/>
		<conv:BoolToLoRAStatusConverter x:Key="BoolToLoRAStatusConverter"/>

		<!-- MVVM Navigation converter -->
		<conv:BoolToSelectedTagConverter x:Key="BoolToSelectedTag"/>

		<!-- ViewMode Template Selector - Advanced progressive disclosure architecture -->
		<local:ViewModeTemplateSelector x:Key="ViewModeTemplateSelector"/>

		<!-- === NAVIGATION BUTTON STYLES === -->

		<!-- Base pill style - FIXED FOR PROPER VISIBILITY -->
		<Style x:Key="BasePillButtonStyle"
			   TargetType="Button">
			<Setter Property="Foreground"
					Value="{DynamicResource ButtonTextNormalBrush}"/>
			<Setter Property="Background"
					Value="{DynamicResource ButtonBackgroundBrush}"/>
			<Setter Property="Padding"
					Value="10,6"/>
			<Setter Property="Margin"
					Value="4,0"/>
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="FontWeight"
					Value="SemiBold"/>
			<Setter Property="BorderThickness"
					Value="0"/>
			<Setter Property="BorderBrush"
					Value="Transparent"/>
			<Setter Property="Cursor"
					Value="Hand"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Border Background="{TemplateBinding Background}"
								CornerRadius="6"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter HorizontalAlignment="Center"
											  VerticalAlignment="Center"
											  TextBlock.Foreground="{TemplateBinding Foreground}"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<!-- HOVER STATE: Only applies when NOT runtime-selected -->
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="True"/>
						<Condition Property="Tag" Value="{x:Null}"/>  <!-- Not runtime-selected -->
					</MultiTrigger.Conditions>
					<Setter Property="Background" Value="{DynamicResource ButtonHoverBrush}"/>
					<Setter Property="Foreground" Value="{DynamicResource ButtonTextHoverBrush}"/>
				</MultiTrigger>
				
				<!-- ACTIVE/SELECTED STATE: Use SAME styling as pressed state (user-confirmed target) -->
				<Trigger Property="Tag" Value="Selected">
					<Setter Property="Background" Value="{DynamicResource ButtonPressedBrush}"/>
					<Setter Property="Foreground" Value="{DynamicResource ButtonTextHoverBrush}"/>
				</Trigger>
				
				<!-- PRESSED STATE -->
				<Trigger Property="IsPressed" Value="True">
					<Setter Property="Background" Value="{DynamicResource ButtonPressedBrush}"/>
					<Setter Property="Foreground" Value="{DynamicResource ButtonTextHoverBrush}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<!-- Main nav button -->
		<Style x:Key="MainNavButtonStyle"
			   TargetType="Button"
			   BasedOn="{StaticResource BasePillButtonStyle}">
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="Padding"
					Value="12,8"/>
		</Style>

		<!-- Sidebar Navigation Button Style -->
		<Style x:Key="SidebarNavButtonStyle"
			   TargetType="Button">
			<Setter Property="Background"
					Value="Transparent"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextPrimaryBrush}"/>
			<Setter Property="BorderThickness"
					Value="0"/>
			<Setter Property="Padding"
					Value="12,8"/>
			<Setter Property="HorizontalAlignment"
					Value="Stretch"/>
			<Setter Property="HorizontalContentAlignment"
					Value="Left"/>
			<Setter Property="FontSize"
					Value="13"/>
			<Setter Property="Cursor"
					Value="Hand"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Border Background="{TemplateBinding Background}"
								CornerRadius="4"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="Center"
											  TextBlock.Foreground="{TemplateBinding Foreground}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource TertiaryDarkBrush}"/>
							</Trigger>
							<Trigger Property="IsPressed"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource AccentRedBrush}"/>
								<Setter Property="Foreground"
										Value="{DynamicResource TextPrimaryBrush}"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="Tag" Value="Selected"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background" Value="{DynamicResource AccentRedBrush}"/>
								<Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}"/>
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Subtab Navigation Button Style -->
		<Style x:Key="SubtabNavButtonStyle" TargetType="Button">
			<Setter Property="HorizontalAlignment" Value="Stretch"/>
			<Setter Property="HorizontalContentAlignment" Value="Left"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="Padding" Value="12,8"/>
			<Setter Property="Foreground" Value="{DynamicResource TextMutedBrush}"/>
			<Setter Property="FontSize" Value="12"/>
			<Setter Property="FontWeight" Value="Normal"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Border x:Name="border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="4"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="Center"
											  TextBlock.Foreground="{TemplateBinding Foreground}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" Value="{DynamicResource TertiaryDarkBrush}"/>
								<Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter Property="Background" Value="{DynamicResource AccentRedBrush}"/>
								<Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="Tag" Value="Selected"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background" Value="{DynamicResource AccentRedBrush}"/>
								<Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}"/>
								<Setter Property="FontWeight" Value="SemiBold"/>
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Sub tab button -->
		<Style x:Key="SubTabButtonStyle"
			   TargetType="Button"
			   BasedOn="{StaticResource BasePillButtonStyle}">
			<Setter Property="FontSize"
					Value="13"/>
			<Setter Property="Padding"
					Value="10,6"/>
			<Setter Property="MinWidth"
					Value="100"/>
			<Setter Property="Opacity"
					Value="0.9"/>
		</Style>


		<!-- === PRIMARY BUTTON STYLES === -->

		<!-- Primary Button Style (Accent) -->
		<Style x:Key="PrimaryButtonStyle"
			   TargetType="Button">
			<Setter Property="Background"
					Value="{DynamicResource AccentRedBrush}"/>
			<Setter Property="Foreground"
					Value="{DynamicResource ButtonTextBrush}"/>
			<Setter Property="BorderThickness"
					Value="0"/>
			<Setter Property="Padding"
					Value="20,12"/>
			<Setter Property="FontWeight"
					Value="SemiBold"/>
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="Cursor"
					Value="Hand"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Border Background="{TemplateBinding Background}"
								CornerRadius="6"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter HorizontalAlignment="Center"
											  VerticalAlignment="Center"
											  TextBlock.Foreground="{TemplateBinding Foreground}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource AccentRedHoverBrush}"/>
							</Trigger>
							<Trigger Property="IsPressed"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource AccentRedPressedBrush}"/>
							</Trigger>
							<Trigger Property="IsEnabled"
									 Value="False">
								<Setter Property="Background"
										Value="{DynamicResource BorderBrush}"/>
								<Setter Property="Foreground"
										Value="{DynamicResource TextDisabledBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Secondary Button Style (Light) -->
		<Style x:Key="SecondaryButtonStyle"
			   TargetType="Button">
			<Setter Property="Background"
					Value="{DynamicResource ButtonBackgroundBrush}"/>
			<Setter Property="Foreground"
					Value="{DynamicResource ButtonTextNormalBrush}"/>
			<Setter Property="BorderThickness"
					Value="0"/>
			<Setter Property="Padding"
					Value="18,10"/>
			<Setter Property="FontWeight"
					Value="Medium"/>
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="Cursor"
					Value="Hand"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Border Background="{TemplateBinding Background}"
								CornerRadius="6"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter HorizontalAlignment="Center"
											  VerticalAlignment="Center"
											  TextBlock.Foreground="{TemplateBinding Foreground}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource BorderHoverBrush}"/>
							</Trigger>
							<Trigger Property="IsPressed"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource BorderHoverBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Danger Button Style (Red) -->
		<Style x:Key="DangerButtonStyle"
			   TargetType="Button">
			<Setter Property="Background"
					Value="{DynamicResource ErrorBrush}"/>
			<Setter Property="Foreground"
					Value="{DynamicResource ButtonTextBrush}"/>
			<Setter Property="BorderThickness"
					Value="0"/>
			<Setter Property="Padding"
					Value="16,10"/>
			<Setter Property="FontWeight"
					Value="SemiBold"/>
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="Cursor"
					Value="Hand"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Border Background="{TemplateBinding Background}"
								CornerRadius="6"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter HorizontalAlignment="Center"
											  VerticalAlignment="Center"
											  TextBlock.Foreground="{TemplateBinding Foreground}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource ErrorBrush}"/>
							</Trigger>
							<Trigger Property="IsPressed"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource ErrorBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Ghost Button Style (Transparent with border) -->
		<Style x:Key="GhostButtonStyle"
			   TargetType="Button">
			<Setter Property="Background"
					Value="Transparent"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextSecondaryBrush}"/>
			<Setter Property="BorderBrush"
					Value="{DynamicResource BorderBrush}"/>
			<Setter Property="BorderThickness"
					Value="1"/>
			<Setter Property="Padding"
					Value="18,10"/>
			<Setter Property="FontWeight"
					Value="Medium"/>
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="Cursor"
					Value="Hand"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Border Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="6"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter HorizontalAlignment="Center"
											  VerticalAlignment="Center"
											  TextBlock.Foreground="{TemplateBinding Foreground}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource SecondaryDarkBrush}"/>
								<Setter Property="BorderBrush"
										Value="{DynamicResource AccentRedBrush}"/>
								<Setter Property="Foreground"
										Value="{DynamicResource ButtonTextHoverBrush}"/>
							</Trigger>
							<Trigger Property="IsPressed"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource TertiaryDarkBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- === TEXT INPUT STYLES === -->

		<!-- Universal Dark TextBox Style -->
		<Style x:Key="DarkTextBoxStyle"
			   TargetType="TextBox">
			<Setter Property="Background"
					Value="{DynamicResource TertiaryDarkBrush}"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextPrimaryBrush}"/>
			<Setter Property="BorderBrush"
					Value="{DynamicResource BorderBrush}"/>
			<Setter Property="BorderThickness"
					Value="1"/>
			<Setter Property="Padding"
					Value="12,8"/>
			<Setter Property="FontFamily"
					Value="Segoe UI"/>
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="CaretBrush"
					Value="{DynamicResource AccentRedBrush}"/>
			<Setter Property="SelectionBrush"
					Value="{DynamicResource AccentRedBrush}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="TextBox">
						<Border Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="6"
								Padding="{TemplateBinding Padding}">
							<ScrollViewer x:Name="PART_ContentHost"
										  Focusable="false"
										  HorizontalScrollBarVisibility="Hidden"
										  VerticalScrollBarVisibility="Hidden"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter Property="BorderBrush"
										Value="{DynamicResource BorderHoverBrush}"/>
							</Trigger>
							<Trigger Property="IsFocused"
									 Value="True">
								<Setter Property="BorderBrush"
										Value="{DynamicResource AccentRedBrush}"/>
							</Trigger>
							<Trigger Property="IsEnabled"
									 Value="False">
								<Setter Property="Background"
										Value="{DynamicResource TertiaryDarkBrush}"/>
								<Setter Property="Foreground"
										Value="{DynamicResource TextDisabledBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Dark TextBox Multi-line (for prompts, etc.) -->
		<Style x:Key="DarkTextBoxMultilineStyle"
			   TargetType="TextBox"
			   BasedOn="{StaticResource DarkTextBoxStyle}">
			<Setter Property="TextWrapping"
					Value="Wrap"/>
			<Setter Property="AcceptsReturn"
					Value="True"/>
			<Setter Property="VerticalScrollBarVisibility"
					Value="Auto"/>
			<Setter Property="MinHeight"
					Value="100"/>
			<Setter Property="Padding"
					Value="12"/>
		</Style>

		<!-- === DROPDOWN STYLES === -->

		<!-- Dark ComboBoxItem Style (must come before DarkComboBoxStyle) -->
		<Style x:Key="DarkComboBoxItemStyle"
			   TargetType="ComboBoxItem">
			<Setter Property="Background"
					Value="Transparent"/>
			<Setter Property="Foreground"
					Value="{DynamicResource DropdownTextBrush}"/>
			<Setter Property="Padding"
					Value="8,6"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ComboBoxItem">
						<Border Name="Border"
								Background="{TemplateBinding Background}"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter TargetName="Border"
										Property="Background"
										Value="{DynamicResource ButtonHoverBrush}"/>
								<Setter Property="Foreground"
										Value="{DynamicResource ButtonTextHoverBrush}"/>
							</Trigger>
							<Trigger Property="IsSelected"
									 Value="True">
								<Setter TargetName="Border"
										Property="Background"
										Value="{DynamicResource ButtonPressedBrush}"/>
								<Setter Property="Foreground"
										Value="{DynamicResource ButtonTextBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Dark ComboBox Style -->
		<Style x:Key="DarkComboBoxStyle"
			   TargetType="ComboBox">
			<Setter Property="Background"
					Value="{DynamicResource TertiaryDarkBrush}"/>
			<Setter Property="Foreground"
					Value="{DynamicResource DropdownTextBrush}"/>
			<Setter Property="BorderBrush"
					Value="{DynamicResource BorderBrush}"/>
			<Setter Property="BorderThickness"
					Value="1"/>
			<Setter Property="Padding"
					Value="12,8"/>
			<Setter Property="ItemContainerStyle"
					Value="{StaticResource DarkComboBoxItemStyle}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ComboBox">
						<Grid>
							<!-- ToggleButton to handle clicks and dropdown opening -->
							<ToggleButton Name="ToggleButton"
										  Background="{TemplateBinding Background}"
										  BorderBrush="{TemplateBinding BorderBrush}"
										  BorderThickness="{TemplateBinding BorderThickness}"
										  IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
										  ClickMode="Press">
								<ToggleButton.Template>
									<ControlTemplate TargetType="ToggleButton">
										<Border Name="Border"
												Background="{TemplateBinding Background}"
												BorderBrush="{TemplateBinding BorderBrush}"
												BorderThickness="{TemplateBinding BorderThickness}"
												CornerRadius="6">
											<Grid>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="*"/>
													<ColumnDefinition Width="20"/>
												</Grid.ColumnDefinitions>

												<!-- Dropdown arrow -->
												<Path Grid.Column="1"
													  Name="Arrow"
													  Fill="{DynamicResource TextSecondaryBrush}"
													  HorizontalAlignment="Center"
													  VerticalAlignment="Center"
													  Data="M 0 0 L 4 4 L 8 0 Z"/>
											</Grid>
										</Border>
										<ControlTemplate.Triggers>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BorderHoverBrush}"/>
												<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource TextPrimaryBrush}"/>
											</Trigger>
											<Trigger Property="IsChecked" Value="True">
												<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentRedBrush}"/>
												<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource AccentRedBrush}"/>
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</ToggleButton.Template>
							</ToggleButton>

							<!-- Content Presenter for selected item -->
							<ContentPresenter Name="ContentSite"
											  IsHitTestVisible="False"
											  Content="{TemplateBinding SelectionBoxItem}"
											  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
											  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
											  Margin="{TemplateBinding Padding}"
											  VerticalAlignment="Center"
											  HorizontalAlignment="Left"/>

							<!-- Popup for dropdown items -->
							<Popup Name="Popup"
								   Placement="Bottom"
								   IsOpen="{TemplateBinding IsDropDownOpen}"
								   AllowsTransparency="True"
								   Focusable="False"
								   PopupAnimation="Slide">
								<Grid Name="DropDown"
									  SnapsToDevicePixels="True"
									  MinWidth="{TemplateBinding ActualWidth}"
									  MaxHeight="{TemplateBinding MaxDropDownHeight}">
									<Border Name="DropDownBorder"
											Background="{DynamicResource SecondaryDarkBrush}"
											BorderBrush="{DynamicResource AccentRedBrush}"
											BorderThickness="1"
											CornerRadius="6">
										<ScrollViewer Margin="4"
													  SnapsToDevicePixels="True">
											<StackPanel IsItemsHost="True"
														KeyboardNavigation.DirectionalNavigation="Contained"/>
										</ScrollViewer>
									</Border>
								</Grid>
							</Popup>
						</Grid>

						<ControlTemplate.Triggers>
							<Trigger Property="HasItems" Value="False">
								<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Foreground" Value="{DynamicResource TextDisabledBrush}"/>
							</Trigger>
							<Trigger Property="IsGrouping" Value="True">
								<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
							</Trigger>
							<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
								<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="6"/>
								<Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<!-- === FORM CONTROL STYLES === -->

		<!-- Dark CheckBox Style -->
		<Style x:Key="DarkCheckBoxStyle"
			   TargetType="CheckBox">
			<Setter Property="Foreground"
					Value="{DynamicResource TextPrimaryBrush}"/>
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="CheckBox">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="20"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>

							<Border x:Name="CheckBorder"
									Background="{DynamicResource TertiaryDarkBrush}"
									BorderBrush="{DynamicResource BorderBrush}"
									BorderThickness="2"
									CornerRadius="3"
									Width="18"
									Height="18">
								<Path x:Name="CheckMark"
									  Fill="{DynamicResource AccentRedBrush}"
									  Data="M 0 5 L 3 8 L 8 0"
									  Stretch="Uniform"
									  Margin="2"
									  Visibility="Collapsed"/>
							</Border>

							<ContentPresenter Grid.Column="1"
											  Margin="8,0,0,0"
											  VerticalAlignment="Center"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked"
									 Value="True">
								<Setter TargetName="CheckMark"
										Property="Visibility"
										Value="Visible"/>
								<Setter TargetName="CheckBorder"
										Property="BorderBrush"
										Value="{DynamicResource AccentRedBrush}"/>
							</Trigger>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter TargetName="CheckBorder"
										Property="BorderBrush"
										Value="{DynamicResource AccentRedBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Dark RadioButton Style -->
		<Style x:Key="DarkRadioButtonStyle"
			   TargetType="RadioButton">
			<Setter Property="Foreground"
					Value="{DynamicResource TextPrimaryBrush}"/>
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="RadioButton">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="20"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>

							<Border x:Name="RadioBorder"
									Background="{DynamicResource TertiaryDarkBrush}"
									BorderBrush="{DynamicResource BorderBrush}"
									BorderThickness="2"
									CornerRadius="9"
									Width="18"
									Height="18">
								<Ellipse x:Name="RadioDot"
										 Fill="{DynamicResource AccentRedBrush}"
										 Width="8"
										 Height="8"
										 Visibility="Collapsed"/>
							</Border>

							<ContentPresenter Grid.Column="1"
											  Margin="8,0,0,0"
											  VerticalAlignment="Center"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked"
									 Value="True">
								<Setter TargetName="RadioDot"
										Property="Visibility"
										Value="Visible"/>
								<Setter TargetName="RadioBorder"
										Property="BorderBrush"
										Value="{DynamicResource AccentRedBrush}"/>
							</Trigger>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter TargetName="RadioBorder"
										Property="BorderBrush"
										Value="{DynamicResource AccentRedBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- === LAYOUT CONTAINER STYLES === -->

		<!-- Dark Border Style -->
		<Style x:Key="DarkBorderStyle"
			   TargetType="Border">
			<Setter Property="Background"
					Value="{DynamicResource SecondaryDarkBrush}"/>
			<Setter Property="BorderBrush"
					Value="{DynamicResource BorderBrush}"/>
			<Setter Property="BorderThickness"
					Value="1"/>
			<Setter Property="CornerRadius"
					Value="8"/>
			<Setter Property="Padding"
					Value="16"/>
		</Style>

		<!-- Dark Card Style (elevated border) -->
		<Style x:Key="DarkCardStyle"
			   TargetType="Border"
			   BasedOn="{StaticResource DarkBorderStyle}">
			<Setter Property="Background"
					Value="{DynamicResource TertiaryDarkBrush}"/>
			<Setter Property="BorderBrush"
					Value="{DynamicResource BorderBrush}"/>
			<Setter Property="Margin"
					Value="0,0,0,12"/>
		</Style>

		<!-- === LIST AND DATA STYLES === -->

		<!-- Dark ListBox Style -->
		<Style x:Key="DarkListBoxStyle"
			   TargetType="ListBox">
			<Setter Property="Background"
					Value="{DynamicResource TertiaryDarkBrush}"/>
			<Setter Property="BorderBrush"
					Value="{DynamicResource BorderBrush}"/>
			<Setter Property="BorderThickness"
					Value="1"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextPrimaryBrush}"/>
			<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
					Value="Auto"/>
			<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
					Value="Auto"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ListBox">
						<Border Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="6">
							<ScrollViewer Padding="4">
								<StackPanel IsItemsHost="True"/>
							</ScrollViewer>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Dark ListBoxItem Style -->
		<Style x:Key="DarkListBoxItemStyle"
			   TargetType="ListBoxItem">
			<Setter Property="Background"
					Value="Transparent"/>
			<Setter Property="Foreground"
					Value="{DynamicResource DropdownTextBrush}"/>
			<Setter Property="Padding"
					Value="12,8"/>
			<Setter Property="Margin"
					Value="2"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ListBoxItem">
						<Border Background="{TemplateBinding Background}"
								CornerRadius="4"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource TertiaryDarkBrush}"/>
							</Trigger>
							<Trigger Property="IsSelected"
									 Value="True">
								<Setter Property="Background"
										Value="{DynamicResource AccentRedBrush}"/>
								<Setter Property="Foreground"
										Value="{DynamicResource ButtonTextBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- === PROGRESS AND FEEDBACK STYLES === -->

		<!-- Dark ProgressBar Style -->
		<Style x:Key="DarkProgressBarStyle"
			   TargetType="ProgressBar">
			<Setter Property="Background"
					Value="{DynamicResource TertiaryDarkBrush}"/>
			<Setter Property="Foreground"
					Value="{DynamicResource AccentRedBrush}"/>
			<Setter Property="BorderBrush"
					Value="{DynamicResource BorderBrush}"/>
			<Setter Property="BorderThickness"
					Value="1"/>
			<Setter Property="Height"
					Value="8"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ProgressBar">
						<Border Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="4">
							<Border x:Name="PART_Track">
								<Border x:Name="PART_Indicator"
										Background="{TemplateBinding Foreground}"
										CornerRadius="3"
										HorizontalAlignment="Left"/>
							</Border>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- === TYPOGRAPHY STYLES === -->

		<Style x:Key="HeadingLargeStyle"
			   TargetType="TextBlock">
			<Setter Property="FontFamily"
					Value="Segoe UI"/>
			<Setter Property="FontSize"
					Value="24"/>
			<Setter Property="FontWeight"
					Value="Bold"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextPrimaryBrush}"/>
		</Style>

		<Style x:Key="HeadingMediumStyle"
			   TargetType="TextBlock">
			<Setter Property="FontFamily"
					Value="Segoe UI"/>
			<Setter Property="FontSize"
					Value="18"/>
			<Setter Property="FontWeight"
					Value="SemiBold"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextPrimaryBrush}"/>
		</Style>

		<Style x:Key="HeadingSmallStyle"
			   TargetType="TextBlock">
			<Setter Property="FontFamily"
					Value="Segoe UI"/>
			<Setter Property="FontSize"
					Value="16"/>
			<Setter Property="FontWeight"
					Value="SemiBold"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextPrimaryBrush}"/>
		</Style>

		<Style x:Key="BodyTextStyle"
			   TargetType="TextBlock">
			<Setter Property="FontFamily"
					Value="Segoe UI"/>
			<Setter Property="FontSize"
					Value="14"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextSecondaryBrush}"/>
			<Setter Property="LineHeight"
					Value="20"/>
		</Style>

		<Style x:Key="CaptionTextStyle"
			   TargetType="TextBlock">
			<Setter Property="FontFamily"
					Value="Segoe UI"/>
			<Setter Property="FontSize"
					Value="12"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextSecondaryBrush}"/>
		</Style>

		<Style x:Key="CodeTextStyle"
			   TargetType="TextBlock">
			<Setter Property="FontFamily"
					Value="Consolas"/>
			<Setter Property="FontSize"
					Value="13"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextPrimaryBrush}"/>
			<Setter Property="Background"
					Value="{DynamicResource TertiaryDarkBrush}"/>
		</Style>

		</ResourceDictionary>
	</Application.Resources>
</Application>