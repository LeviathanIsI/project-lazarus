<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <!-- SHARED TEMPLATES: Common base templates used across all ViewModes -->
    <!-- These provide consistent base styling that gets enhanced by ViewMode-specific templates -->
    <!-- Note: Common styles like CodeTextStyle, CaptionTextStyle etc. are defined in App.xaml -->
    
    <!-- Expandable Section Style -->
    <Style x:Key="SubtleExpanderStyle" TargetType="Expander">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <StackPanel>
                        <ToggleButton x:Name="HeaderSite"
                                      Content="{TemplateBinding Header}"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{DynamicResource GhostButtonStyle}"
                                      HorizontalAlignment="Left"
                                      Padding="4,2"
                                      FontSize="10"/>
                        <ContentPresenter x:Name="ExpandSite"
                                          Visibility="Collapsed"
                                          Margin="12,0,0,0"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Parameter Group Style -->
    <Style x:Key="ParameterGroupStyle" TargetType="GroupBox">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="Background" Value="{DynamicResource TertiaryDarkBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="12"/>
        <Setter Property="Margin" Value="0,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        
                        <Border Grid.Row="0"
                                Background="{DynamicResource SecondaryDarkBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4,4,0,0">
                            <ContentPresenter ContentSource="Header"
                                              Margin="8,4"
                                              TextBlock.Foreground="{DynamicResource TextPrimaryBrush}"
                                              TextBlock.FontWeight="SemiBold"/>
                        </Border>
                        
                        <Border Grid.Row="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="0,0,4,4">
                            <ContentPresenter Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Code TextBox Style for JSON editing -->
    <Style x:Key="CodeTextBoxStyle" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource PrimaryDarkBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="FontFamily" Value="Consolas, 'Courier New', monospace"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="AcceptsTab" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Padding="{TemplateBinding Padding}"
                                      VerticalScrollBarVisibility="Auto"
                                      HorizontalScrollBarVisibility="Auto"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Converters for ViewMode templates -->
    <BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
    
    <!-- Bool to Status Text Converters -->
    <x:Static x:Key="BoolToActiveStatus" Member="Lazarus.Desktop.Converters.BoolToActiveStatusConverter.Instance"/>
    <x:Static x:Key="BoolToAppliedStatus" Member="Lazarus.Desktop.Converters.BoolToAppliedStatusConverter.Instance"/>
    <x:Static x:Key="BoolToApplyText" Member="Lazarus.Desktop.Converters.BoolToApplyTextConverter.Instance"/>
    <x:Static x:Key="BoolToAccentBrush" Member="Lazarus.Desktop.Converters.BoolToAccentBrushConverter.Instance"/>
    
    <!-- Role-based Converters -->
    <x:Static x:Key="RoleToDisplayName" Member="Lazarus.Desktop.Converters.RoleToDisplayNameConverter.Instance"/>
    <x:Static x:Key="RoleToBackgroundBrush" Member="Lazarus.Desktop.Converters.RoleToBackgroundBrushConverter.Instance"/>
    
    <!-- Utility Converters -->
    <x:Static x:Key="InvertBool" Member="Lazarus.Desktop.Converters.InvertBoolConverter.Instance"/>
    
    <!-- Toggle Button Style for JSON/Grid view switching -->
    <Style x:Key="ToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="{DynamicResource TertiaryDarkBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AccentRedBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonHoverBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextHoverBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- ModuleStatusBar Template - Consistent status display across all feature modules -->
    <DataTemplate x:Key="ModuleStatusBar">
        <Border Background="{DynamicResource TertiaryDarkBrush}" 
                BorderBrush="{DynamicResource BorderBrush}" 
                BorderThickness="0,1,0,0" 
                Padding="8,4">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <!-- Module Status -->
                <StackPanel Grid.Column="0" Orientation="Horizontal">
                    <!-- Status Indicator -->
                    <Ellipse Width="8" Height="8" 
                             Fill="{Binding ModuleStatusColor, Converter={StaticResource BoolToAccentBrush}}" 
                             VerticalAlignment="Center" 
                             Margin="0,0,6,0"/>
                    <TextBlock Text="{Binding ModuleStatus}" 
                               Foreground="{DynamicResource TextSecondaryBrush}" 
                               FontSize="9" 
                               VerticalAlignment="Center"/>
                </StackPanel>
                
                <!-- Progress Bar (visible during processing) -->
                <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="12,0">
                    <ProgressBar Value="{Binding ProcessingProgress}" 
                                 Maximum="100" 
                                 Height="4" 
                                 MinWidth="80"
                                 VerticalAlignment="Center"
                                 Visibility="{Binding IsProcessing, Converter={StaticResource BoolToVisibility}}"/>
                    <TextBlock Text="{Binding ProcessingStatus}" 
                               Foreground="{DynamicResource TextMutedBrush}" 
                               FontSize="9" 
                               VerticalAlignment="Center" 
                               Margin="8,0,0,0"
                               Visibility="{Binding IsProcessing, Converter={StaticResource BoolToVisibility}}"/>
                </StackPanel>
                
                <!-- Last Operation -->
                <TextBlock Grid.Column="2" 
                           Text="{Binding LastOperation}" 
                           Foreground="{DynamicResource TextMutedBrush}" 
                           FontSize="9" 
                           VerticalAlignment="Center" 
                           Margin="0,0,12,0"/>
                
                <!-- Timestamp -->
                <TextBlock Grid.Column="3" 
                           Text="{Binding TimestampDisplay}" 
                           Foreground="{DynamicResource TextMutedBrush}" 
                           FontSize="9" 
                           VerticalAlignment="Center"/>
            </Grid>
        </Border>
    </DataTemplate>
    
    <!-- CapabilityErrorTemplate - Friendly error states for missing capabilities -->
    <DataTemplate x:Key="CapabilityErrorTemplate">
        <Border Background="{DynamicResource TertiaryDarkBrush}" 
                BorderBrush="{DynamicResource WarningBrush}" 
                BorderThickness="1" 
                CornerRadius="8" 
                Padding="20">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" MaxWidth="400">
                <!-- Error Icon -->
                <TextBlock Text="{Binding ErrorIcon}" 
                           FontSize="32" 
                           HorizontalAlignment="Center" 
                           Margin="0,0,0,12"/>
                
                <!-- Error Title -->
                <TextBlock Text="{Binding ErrorTitle}" 
                           Style="{DynamicResource HeadingMediumStyle}"
                           HorizontalAlignment="Center" 
                           Margin="0,0,0,8"/>
                
                <!-- Error Description -->
                <TextBlock Text="{Binding ErrorDescription}" 
                           Style="{DynamicResource BodyTextStyle}"
                           Foreground="{DynamicResource TextSecondaryBrush}"
                           TextWrapping="Wrap" 
                           TextAlignment="Center"
                           Margin="0,0,0,16"/>
                
                <!-- Action Button -->
                <Button Content="{Binding ActionButtonText}" 
                        Command="{Binding ActionCommand}"
                        Style="{DynamicResource PrimaryButtonStyle}"
                        Padding="16,8"
                        Visibility="{Binding HasAction, Converter={StaticResource BoolToVisibility}}"/>
                
                <!-- Requirements List -->
                <StackPanel Visibility="{Binding HasRequirements, Converter={StaticResource BoolToVisibility}}"
                           Margin="0,12,0,0">
                    <TextBlock Text="Requirements:" 
                               Style="{DynamicResource CaptionTextStyle}"
                               FontWeight="SemiBold"
                               HorizontalAlignment="Center"
                               Margin="0,0,0,4"/>
                    <ItemsControl ItemsSource="{Binding Requirements}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" 
                                           HorizontalAlignment="Center"
                                           Margin="0,2">
                                    <TextBlock Text="{Binding IsAvailable, Converter={StaticResource BoolToStatusIcon}}" 
                                               Foreground="{Binding IsAvailable, Converter={StaticResource BoolToAccentBrush}}"
                                               Margin="0,0,6,0"/>
                                    <TextBlock Text="{Binding Description}" 
                                               Style="{DynamicResource CaptionTextStyle}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </StackPanel>
        </Border>
    </DataTemplate>
    
</ResourceDictionary>