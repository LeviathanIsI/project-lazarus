<UserControl x:Class="Lazarus.Desktop.Views.ThreeDModels.Controls.ModelTreeView"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 mc:Ignorable="d"
			 Background="{StaticResource SecondaryDarkBrush}">

	<UserControl.Resources>
		<!-- [All the TreeView templates stay exactly the same] -->
		<HierarchicalDataTemplate x:Key="NodeTemplate"
								  ItemsSource="{Binding Children}">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>

				<TextBlock Grid.Column="0"
						   Text="{Binding Icon}"
						   FontSize="14"
						   Margin="0,0,6,0"
						   VerticalAlignment="Center"/>
				<TextBlock Grid.Column="1"
						   Text="{Binding Name}"
						   Style="{StaticResource BodyTextStyle}"
						   FontSize="12"
						   VerticalAlignment="Center"
						   TextTrimming="CharacterEllipsis"/>
				<TextBlock Grid.Column="2"
						   Text="{Binding FileSize}"
						   Style="{StaticResource CaptionTextStyle}"
						   FontSize="10"
						   VerticalAlignment="Center"
						   Margin="6,0,0,0"
						   Visibility="{Binding IsDirectory, Converter={StaticResource InvertBool}}"/>
			</Grid>
		</HierarchicalDataTemplate>

		<Style x:Key="DarkTreeViewItemStyle"
			   TargetType="TreeViewItem">
			<!-- [TreeViewItem style remains unchanged - just keeping it compact] -->
			<Setter Property="Background"
					Value="Transparent"/>
			<Setter Property="Foreground"
					Value="{StaticResource TextPrimaryBrush}"/>
			<Setter Property="Padding"
					Value="4,2"/>
			<Setter Property="Margin"
					Value="0,1"/>
			<Setter Property="IsExpanded"
					Value="{Binding IsExpanded, Mode=TwoWay}"/>
			<Setter Property="IsSelected"
					Value="{Binding IsSelected, Mode=TwoWay}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="TreeViewItem">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<Border x:Name="Border"
									Grid.Row="0"
									Background="{TemplateBinding Background}"
									Padding="{TemplateBinding Padding}"
									CornerRadius="4"
									Margin="2,0">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto"/>
										<ColumnDefinition Width="*"/>
									</Grid.ColumnDefinitions>
									<ToggleButton x:Name="Expander"
												  Grid.Column="0"
												  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
												  ClickMode="Press"
												  Width="16"
												  Height="16"
												  Margin="0,0,4,0"
												  Background="Transparent"
												  BorderThickness="0">
										<ToggleButton.Style>
											<Style TargetType="ToggleButton">
												<Setter Property="Template">
													<Setter.Value>
														<ControlTemplate TargetType="ToggleButton">
															<Border Background="Transparent">
																<TextBlock x:Name="ExpanderIcon"
																		   Text="▶"
																		   FontSize="10"
																		   Foreground="{StaticResource TextMutedBrush}"
																		   HorizontalAlignment="Center"
																		   VerticalAlignment="Center"
																		   RenderTransformOrigin="0.5,0.5">
																	<TextBlock.RenderTransform>
																		<RotateTransform x:Name="ExpanderRotation"/>
																	</TextBlock.RenderTransform>
																</TextBlock>
															</Border>
															<ControlTemplate.Triggers>
																<Trigger Property="IsChecked"
																		 Value="True">
																	<Trigger.EnterActions>
																		<BeginStoryboard>
																			<Storyboard>
																				<DoubleAnimation Storyboard.TargetName="ExpanderRotation"
																								 Storyboard.TargetProperty="Angle"
																								 To="90"
																								 Duration="0:0:0.2"/>
																			</Storyboard>
																		</BeginStoryboard>
																	</Trigger.EnterActions>
																	<Trigger.ExitActions>
																		<BeginStoryboard>
																			<Storyboard>
																				<DoubleAnimation Storyboard.TargetName="ExpanderRotation"
																								 Storyboard.TargetProperty="Angle"
																								 To="0"
																								 Duration="0:0:0.2"/>
																			</Storyboard>
																		</BeginStoryboard>
																	</Trigger.ExitActions>
																</Trigger>
																<Trigger Property="IsMouseOver"
																		 Value="True">
																	<Setter TargetName="ExpanderIcon"
																			Property="Foreground"
																			Value="{StaticResource AccentPurpleBrush}"/>
																</Trigger>
															</ControlTemplate.Triggers>
														</ControlTemplate>
													</Setter.Value>
												</Setter>
											</Style>
										</ToggleButton.Style>
									</ToggleButton>
									<ContentPresenter Grid.Column="1"
													  x:Name="PART_Header"
													  ContentSource="Header"
													  HorizontalAlignment="Left"
													  VerticalAlignment="Center"/>
								</Grid>
							</Border>
							<ItemsPresenter x:Name="ItemsHost"
											Grid.Row="1"
											Margin="16,0,0,0"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="HasItems"
									 Value="False">
								<Setter TargetName="Expander"
										Property="Visibility"
										Value="Hidden"/>
							</Trigger>
							<Trigger Property="IsExpanded"
									 Value="False">
								<Setter TargetName="ItemsHost"
										Property="Visibility"
										Value="Collapsed"/>
							</Trigger>
							<Trigger Property="IsSelected"
									 Value="True">
								<Setter TargetName="Border"
										Property="Background"
										Value="{StaticResource AccentPurpleBrush}"/>
							</Trigger>
							<Trigger Property="IsMouseOver"
									 Value="True">
								<Setter TargetName="Border"
										Property="Background"
										Value="{StaticResource TertiaryDarkBrush}"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected"
											   Value="True"/>
									<Condition Property="IsMouseOver"
											   Value="True"/>
								</MultiTrigger.Conditions>
								<Setter TargetName="Border"
										Property="Background"
										Value="{StaticResource AccentPurpleHoverBrush}"/>
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</UserControl.Resources>

	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>

		<!-- Header -->
		<Grid Grid.Row="0"
			  Margin="12,12,12,8">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="Auto"/>
			</Grid.ColumnDefinitions>

			<TextBlock Grid.Column="0"
					   Text="Model Library"
					   Style="{StaticResource HeadingSmallStyle}"
					   FontSize="14"/>

			<Button Grid.Column="1"
					Content="🔄"
					Command="{Binding RefreshCommand}"
					Style="{StaticResource SecondaryButtonStyle}"
					Padding="6,4"
					FontSize="10"
					ToolTip="Refresh Library"/>
		</Grid>

		<!-- Directory Path Selection -->
		<Grid Grid.Row="1"
			  Margin="12,0,12,8">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="Auto"/>
			</Grid.ColumnDefinitions>

			<TextBox Grid.Column="0"
					 Text="{Binding BasePath, Mode=OneWay}"
					 IsReadOnly="True"
					 Style="{StaticResource DarkTextBoxStyle}"
					 FontSize="11"
					 VerticalContentAlignment="Center"
					 Margin="0,0,4,0"/>

			<Button Grid.Column="1"
					Content="📁"
					Command="{Binding BrowsePathCommand}"
					Style="{StaticResource PrimaryButtonStyle}"
					Padding="8,6"
					FontSize="12"
					ToolTip="Browse for Models Directory"/>
		</Grid>

		<!-- Tree View (now directly follows path selection) -->
		<Border Grid.Row="2"
				Background="{StaticResource TertiaryDarkBrush}"
				CornerRadius="6"
				Margin="12,0,12,8">
			<TreeView x:Name="ModelsTreeView"
					  ItemsSource="{Binding RootNodes}"
					  ItemTemplate="{StaticResource NodeTemplate}"
					  ItemContainerStyle="{StaticResource DarkTreeViewItemStyle}"
					  Background="Transparent"
					  BorderThickness="0"
					  ScrollViewer.HorizontalScrollBarVisibility="Auto"
					  ScrollViewer.VerticalScrollBarVisibility="Auto"
					  Padding="8">
				<TreeView.Style>
					<Style TargetType="TreeView">
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="TreeView">
									<ScrollViewer x:Name="TreeScrollViewer"
												  Background="{TemplateBinding Background}"
												  BorderBrush="{TemplateBinding BorderBrush}"
												  BorderThickness="{TemplateBinding BorderThickness}"
												  Padding="{TemplateBinding Padding}"
												  CanContentScroll="False"
												  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
												  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
										<ItemsPresenter/>
									</ScrollViewer>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</TreeView.Style>
			</TreeView>
		</Border>

		<!-- Status Bar -->
		<Grid Grid.Row="3"
			  Margin="12,0,12,12">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="Auto"/>
			</Grid.ColumnDefinitions>

			<TextBlock Grid.Column="0"
					   Text="{Binding StatusText}"
					   Style="{StaticResource CaptionTextStyle}"
					   FontSize="10"
					   VerticalAlignment="Center"/>

			<StackPanel Grid.Column="1"
						Orientation="Horizontal"
						Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
				<Border Background="{StaticResource AccentPurpleBrush}"
						Width="10"
						Height="10"
						CornerRadius="5"
						Margin="8,0,0,0">
					<Border.RenderTransform>
						<RotateTransform/>
					</Border.RenderTransform>
					<Border.Triggers>
						<EventTrigger RoutedEvent="Border.Loaded">
							<BeginStoryboard>
								<Storyboard RepeatBehavior="Forever">
									<DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
													 From="0"
													 To="360"
													 Duration="0:0:1"/>
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
					</Border.Triggers>
				</Border>
			</StackPanel>
		</Grid>
	</Grid>
</UserControl>